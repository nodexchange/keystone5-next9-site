{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\wojtalam\\\\Workspace\\\\Github\\\\arc-keystone5\\\\site\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        query {\\n          authenticatedUser {\\n            id\\n            name\\n            isAdmin\\n          }\\n        }\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport App, { Container } from 'next/app';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport { ApolloProvider } from 'react-apollo';\nimport { ToastProvider } from 'react-toast-notifications';\nimport withApollo from '../lib/withApollo';\nimport { AuthProvider } from '../lib/authetication';\nimport StylesBase from '../primitives/StylesBase';\nimport GoogleAnalytics from '../components/GoogleAnalytics';\n\nvar MyApp =\n/*#__PURE__*/\nfunction (_App) {\n  _inherits(MyApp, _App);\n\n  function MyApp() {\n    _classCallCheck(this, MyApp);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MyApp).apply(this, arguments));\n  }\n\n  _createClass(MyApp, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          apolloClient = _this$props.apolloClient,\n          user = _this$props.user;\n      return __jsx(ToastProvider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, __jsx(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, __jsx(ApolloProvider, {\n        client: apolloClient,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, __jsx(AuthProvider, {\n        initialUserValue: user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, __jsx(Head, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, __jsx(\"link\", {\n        rel: \"shortcut icon\",\n        href: \"/favicon.ico\",\n        type: \"image/x-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), __jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      })), __jsx(StylesBase, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), __jsx(Component, _extends({}, pageProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }))))), __jsx(GoogleAnalytics, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var Component, ctx, pageProps, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Component = _ref.Component, ctx = _ref.ctx;\n                pageProps = {};\n                _context.next = 4;\n                return ctx.apolloClient.query({\n                  query: gql(_templateObject()),\n                  fetchPolicy: 'network-only'\n                });\n\n              case 4:\n                data = _context.sent;\n\n                if (!Component.getInitialProps) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 8;\n                return Component.getInitialProps(ctx);\n\n              case 8:\n                pageProps = _context.sent;\n\n              case 9:\n                return _context.abrupt(\"return\", {\n                  pageProps: pageProps,\n                  user: data.data ? data.data.authenticatedUser : undefined\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return MyApp;\n}(App);\n\nexport default withApollo(MyApp);","map":{"version":3,"sources":["C:/Users/wojtalam/Workspace/Github/arc-keystone5/site/pages/_app.js"],"names":["React","App","Container","Head","gql","ApolloProvider","ToastProvider","withApollo","AuthProvider","StylesBase","GoogleAnalytics","MyApp","props","Component","pageProps","apolloClient","user","ctx","query","fetchPolicy","data","getInitialProps","authenticatedUser","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,IAAcC,SAAd,QAA+B,UAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AAEA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;;IAEMC,K;;;;;;;;;;;;;6BAwBK;AAAA,wBAC8C,KAAKC,KADnD;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,SADZ,eACYA,SADZ;AAAA,UACuBC,YADvB,eACuBA,YADvB;AAAA,UACqCC,IADrC,eACqCA,IADrC;AAEP,aACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,cAAD;AAAgB,QAAA,MAAM,EAAED,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,YAAD;AAAc,QAAA,gBAAgB,EAAEC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,GAAG,EAAC,eAAV;AAA0B,QAAA,IAAI,EAAC,cAA/B;AAA8C,QAAA,IAAI,EAAC,cAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,OAAO,EAAC,2EAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,EAQE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,EASE,MAAC,SAAD,eAAeF,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SATF,CADF,CADF,CADF,EAgBE,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBF,CADF;AAoBD;;;;;;;;;;;;AA7C8BD,gBAAAA,S,QAAAA,S,EAAWI,G,QAAAA,G;AACpCH,gBAAAA,S,GAAY,E;;uBAEGG,GAAG,CAACF,YAAJ,CAAiBG,KAAjB,CAAuB;AACxCA,kBAAAA,KAAK,EAAEd,GAAF,mBADmC;AAUxCe,kBAAAA,WAAW,EAAE;AAV2B,iBAAvB,C;;;AAAbC,gBAAAA,I;;qBAaFP,SAAS,CAACQ,e;;;;;;uBACMR,SAAS,CAACQ,eAAV,CAA0BJ,GAA1B,C;;;AAAlBH,gBAAAA,S;;;iDAGK;AAAEA,kBAAAA,SAAS,EAATA,SAAF;AAAaE,kBAAAA,IAAI,EAAEI,IAAI,CAACA,IAAL,GAAYA,IAAI,CAACA,IAAL,CAAUE,iBAAtB,GAA0CC;AAA7D,iB;;;;;;;;;;;;;;;;;;;EArBStB,G;;AAiDpB,eAAeM,UAAU,CAACI,KAAD,CAAzB","sourcesContent":["import React from 'react';\nimport App, { Container } from 'next/app';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport { ApolloProvider } from 'react-apollo';\nimport { ToastProvider } from 'react-toast-notifications';\n\nimport withApollo from '../lib/withApollo';\nimport { AuthProvider } from '../lib/authetication';\nimport StylesBase from '../primitives/StylesBase';\nimport GoogleAnalytics from '../components/GoogleAnalytics';\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {};\n\n    const data = await ctx.apolloClient.query({\n      query: gql`\n        query {\n          authenticatedUser {\n            id\n            name\n            isAdmin\n          }\n        }\n      `,\n      fetchPolicy: 'network-only',\n    });\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    return { pageProps, user: data.data ? data.data.authenticatedUser : undefined };\n  }\n\n  render() {\n    const { Component, pageProps, apolloClient, user } = this.props;\n    return (\n      <ToastProvider>\n        <Container>\n          <ApolloProvider client={apolloClient}>\n            <AuthProvider initialUserValue={user}>\n              <Head>\n                <link rel=\"shortcut icon\" href=\"/favicon.ico\" type=\"image/x-icon\" />\n                <meta\n                  name=\"viewport\"\n                  content=\"width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover\"\n                />\n              </Head>\n              <StylesBase />\n              <Component {...pageProps} />\n            </AuthProvider>\n          </ApolloProvider>\n        </Container>\n        <GoogleAnalytics />\n      </ToastProvider>\n    );\n  }\n}\n\nexport default withApollo(MyApp);\n"]},"metadata":{},"sourceType":"module"}