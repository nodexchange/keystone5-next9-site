{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\wojtalam\\\\Workspace\\\\Github\\\\arc-keystone5\\\\site\\\\lib\\\\withApollo.js\";\nvar __jsx = React.createElement;\n\n/* This code is lifted from the Next.js Apollo example. See\nhttps://github.com/zeit/next.js/blob/canary/examples/with-apollo */\nimport React from 'react';\nimport initApollo from './initApollo';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(Apollo, _React$Component);\n\n    _createClass(Apollo, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var Component, router, res, apollo, appProps, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Component = ctx.Component, router = ctx.router, res = ctx.ctx.res; // Run all GraphQL queries in the component tree\n                  // and extract the resulting data\n\n                  apollo = initApollo();\n                  ctx.ctx.apolloClient = apollo;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 7;\n                  return App.getInitialProps(ctx);\n\n                case 7:\n                  appProps = _context.sent;\n\n                case 8:\n                  if (!(res && res.finished)) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", {});\n\n                case 10:\n                  if (process.browser) {\n                    _context.next = 20;\n                    break;\n                  }\n\n                  _context.prev = 11;\n                  _context.next = 14;\n                  return getDataFromTree(__jsx(App, _extends({}, appProps, {\n                    Component: Component,\n                    router: router,\n                    apolloClient: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 40\n                    },\n                    __self: this\n                  })));\n\n                case 14:\n                  _context.next = 19;\n                  break;\n\n                case 16:\n                  _context.prev = 16;\n                  _context.t0 = _context[\"catch\"](11);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 19:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 20:\n                  // Extract query data from the Apollo store\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 22:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[11, 16]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function Apollo(props) {\n      var _this;\n\n      _classCallCheck(this, Apollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Apollo).call(this, props));\n      _this.apolloClient = initApollo(props.apolloState);\n      return _this;\n    }\n\n    _createClass(Apollo, [{\n      key: \"render\",\n      value: function render() {\n        return __jsx(App, _extends({}, this.props, {\n          apolloClient: this.apolloClient,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return Apollo;\n  }(React.Component), _defineProperty(_class, \"displayName\", 'withApollo(App)'), _temp;\n});","map":{"version":3,"sources":["C:/Users/wojtalam/Workspace/Github/arc-keystone5/site/lib/withApollo.js"],"names":["React","initApollo","Head","getDataFromTree","App","ctx","Component","router","res","apollo","apolloClient","appProps","getInitialProps","finished","process","browser","console","error","rewind","apolloState","cache","extract","props"],"mappings":";;;;;;;;;;;;;AAAA;;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,gBAAe,UAAAC,GAAG,EAAI;AAAA;;AACpB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAE+BC,GAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAIMC,kBAAAA,SAJN,GAOQD,GAPR,CAIMC,SAJN,EAKMC,MALN,GAOQF,GAPR,CAKME,MALN,EAMaC,GANb,GAOQH,GAPR,CAMMA,GANN,CAMaG,GANb,EASI;AACA;;AACMC,kBAAAA,MAXV,GAWmBR,UAAU,EAX7B;AAaII,kBAAAA,GAAG,CAACA,GAAJ,CAAQK,YAAR,GAAuBD,MAAvB;AAEIE,kBAAAA,QAfR,GAemB,EAfnB;;AAAA,uBAgBQP,GAAG,CAACQ,eAhBZ;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAiBuBR,GAAG,CAACQ,eAAJ,CAAoBP,GAApB,CAjBvB;;AAAA;AAiBMM,kBAAAA,QAjBN;;AAAA;AAAA,wBAoBQH,GAAG,IAAIA,GAAG,CAACK,QApBnB;AAAA;AAAA;AAAA;;AAAA,mDAuBa,EAvBb;;AAAA;AAAA,sBA0BSC,OAAO,CAACC,OA1BjB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBA6BcZ,eAAe,CACnB,MAAC,GAAD,eAASQ,QAAT;AAAmB,oBAAA,SAAS,EAAEL,SAA9B;AAAyC,oBAAA,MAAM,EAAEC,MAAjD;AAAyD,oBAAA,YAAY,EAAEE,MAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADmB,CA7B7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiCQ;AACA;AACA;AACAO,kBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AApCR;AAuCM;AACA;AACAf,kBAAAA,IAAI,CAACgB,MAAL;;AAzCN;AA4CI;AACMC,kBAAAA,WA7CV,GA6CwBV,MAAM,CAACW,KAAP,CAAaC,OAAb,EA7CxB;AAAA,qEAgDSV,QAhDT;AAiDMQ,oBAAAA,WAAW,EAAXA;AAjDN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqDE,oBAAYG,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;AACA,YAAKZ,YAAL,GAAoBT,UAAU,CAACqB,KAAK,CAACH,WAAP,CAA9B;AAFiB;AAGlB;;AAxDH;AAAA;AAAA,+BA0DW;AACP,eAAO,MAAC,GAAD,eAAS,KAAKG,KAAd;AAAqB,UAAA,YAAY,EAAE,KAAKZ,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AA5DH;;AAAA;AAAA,IAA4BV,KAAK,CAACM,SAAlC,0CACuB,iBADvB;AA8DD,CA/DD","sourcesContent":["/* This code is lifted from the Next.js Apollo example. See\nhttps://github.com/zeit/next.js/blob/canary/examples/with-apollo */\n\nimport React from 'react';\nimport initApollo from './initApollo';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static displayName = 'withApollo(App)';\n    static async getInitialProps(ctx) {\n      const {\n        Component,\n        router,\n        ctx: { res },\n      } = ctx;\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo();\n\n      ctx.ctx.apolloClient = apollo;\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {};\n      }\n\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App {...appProps} Component={Component} router={router} apolloClient={apollo} />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState,\n      };\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}