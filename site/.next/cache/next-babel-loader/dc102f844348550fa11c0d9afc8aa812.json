{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nimport facepaint from 'facepaint';\nimport { breakpoints } from '../theme';\n\nconst bpEntries = _Object$entries(breakpoints);\n\nconst maxWidth = (width, m = true) => `${m ? '@media ' : ''}(max-width: ${width}px)`;\n\nconst minWidth = (width, m = true) => `${m ? '@media ' : ''}(min-width: ${width}px)`; // MIN-width queries (default)\n\n\nexport const media = bpEntries.reduce((obj, [key, value]) => _objectSpread({}, obj, {\n  [key]: minWidth(value)\n}), {}); // MAX-width queries\n\nexport const mediaMax = bpEntries.reduce((obj, [key, value]) => _objectSpread({}, obj, {\n  [key]: maxWidth(value - 1)\n}), {}); // ONLY-size queries\n\nexport const mediaOnly = bpEntries.reduce((obj, entry, idx) => {\n  const nextEntry = bpEntries[idx + 1];\n  if (!nextEntry) return obj;\n  const min = entry[1];\n  const [size, max] = nextEntry;\n  return _objectSpread({}, obj, {\n    [size]: `${minWidth(min)} and ${maxWidth(max, false)}`\n  });\n}, {});\n/*\n  Array Syntax for Breakpoints\n  ------------------------------\n  <div css={mq({\n    fontSize: [14, 16],\n    width: ['12rem', '24rem', '36rem', '48rem'],\n  })} />\n*/\n\nexport const mq = facepaint(_Object$values(breakpoints).map(value => minWidth(value)));","map":{"version":3,"sources":["C:/Users/wojtalam/Workspace/Github/arc-keystone5/site/helpers/media.js"],"names":["facepaint","breakpoints","bpEntries","maxWidth","width","m","minWidth","media","reduce","obj","key","value","mediaMax","mediaOnly","entry","idx","nextEntry","min","size","max","mq","map"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,WAAT,QAA4B,UAA5B;;AAEA,MAAMC,SAAS,GAAG,gBAAeD,WAAf,CAAlB;;AACA,MAAME,QAAQ,GAAG,CAACC,KAAD,EAAQC,CAAC,GAAG,IAAZ,KAAsB,GAAEA,CAAC,GAAG,SAAH,GAAe,EAAG,eAAcD,KAAM,KAAhF;;AACA,MAAME,QAAQ,GAAG,CAACF,KAAD,EAAQC,CAAC,GAAG,IAAZ,KAAsB,GAAEA,CAAC,GAAG,SAAH,GAAe,EAAG,eAAcD,KAAM,KAAhF,C,CAEA;;;AACA,OAAO,MAAMG,KAAK,GAAGL,SAAS,CAACM,MAAV,CACnB,CAACC,GAAD,EAAM,CAACC,GAAD,EAAMC,KAAN,CAAN,uBAA6BF,GAA7B;AAAkC,GAACC,GAAD,GAAOJ,QAAQ,CAACK,KAAD;AAAjD,EADmB,EAEnB,EAFmB,CAAd,C,CAKP;;AACA,OAAO,MAAMC,QAAQ,GAAGV,SAAS,CAACM,MAAV,CACtB,CAACC,GAAD,EAAM,CAACC,GAAD,EAAMC,KAAN,CAAN,uBAA6BF,GAA7B;AAAkC,GAACC,GAAD,GAAOP,QAAQ,CAACQ,KAAK,GAAG,CAAT;AAAjD,EADsB,EAEtB,EAFsB,CAAjB,C,CAKP;;AACA,OAAO,MAAME,SAAS,GAAGX,SAAS,CAACM,MAAV,CAAiB,CAACC,GAAD,EAAMK,KAAN,EAAaC,GAAb,KAAqB;AAC7D,QAAMC,SAAS,GAAGd,SAAS,CAACa,GAAG,GAAG,CAAP,CAA3B;AAEA,MAAI,CAACC,SAAL,EAAgB,OAAOP,GAAP;AAEhB,QAAMQ,GAAG,GAAGH,KAAK,CAAC,CAAD,CAAjB;AACA,QAAM,CAACI,IAAD,EAAOC,GAAP,IAAcH,SAApB;AAEA,2BACKP,GADL;AAEE,KAACS,IAAD,GAAS,GAAEZ,QAAQ,CAACW,GAAD,CAAM,QAAOd,QAAQ,CAACgB,GAAD,EAAM,KAAN,CAAa;AAFvD;AAID,CAZwB,EAYtB,EAZsB,CAAlB;AAcP;;;;;;;;;AASA,OAAO,MAAMC,EAAE,GAAGpB,SAAS,CAAC,eAAcC,WAAd,EAA2BoB,GAA3B,CAA+BV,KAAK,IAAIL,QAAQ,CAACK,KAAD,CAAhD,CAAD,CAApB","sourcesContent":["import facepaint from 'facepaint';\nimport { breakpoints } from '../theme';\n\nconst bpEntries = Object.entries(breakpoints);\nconst maxWidth = (width, m = true) => `${m ? '@media ' : ''}(max-width: ${width}px)`;\nconst minWidth = (width, m = true) => `${m ? '@media ' : ''}(min-width: ${width}px)`;\n\n// MIN-width queries (default)\nexport const media = bpEntries.reduce(\n  (obj, [key, value]) => ({ ...obj, [key]: minWidth(value) }),\n  {}\n);\n\n// MAX-width queries\nexport const mediaMax = bpEntries.reduce(\n  (obj, [key, value]) => ({ ...obj, [key]: maxWidth(value - 1) }),\n  {}\n);\n\n// ONLY-size queries\nexport const mediaOnly = bpEntries.reduce((obj, entry, idx) => {\n  const nextEntry = bpEntries[idx + 1];\n\n  if (!nextEntry) return obj;\n\n  const min = entry[1];\n  const [size, max] = nextEntry;\n\n  return {\n    ...obj,\n    [size]: `${minWidth(min)} and ${maxWidth(max, false)}`,\n  };\n}, {});\n\n/*\n  Array Syntax for Breakpoints\n  ------------------------------\n  <div css={mq({\n    fontSize: [14, 16],\n    width: ['12rem', '24rem', '36rem', '48rem'],\n  })} />\n*/\n\nexport const mq = facepaint(Object.values(breakpoints).map(value => minWidth(value)));\n"]},"metadata":{},"sourceType":"module"}