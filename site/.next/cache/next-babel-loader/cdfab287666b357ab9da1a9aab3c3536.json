{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wojtalam\\\\Workspace\\\\Github\\\\arc-keystone5\\\\site\\\\components\\\\auth\\\\forgotPassword.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/** @jsx jsx */\nimport { useState, useEffect } from 'react';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport { jsx } from '@emotion/core';\nimport gql from 'graphql-tag';\nimport { useAuth } from '../../lib/authetication';\nimport { Button, Field, Group, Label, Link, Input } from '../../primitives/forms';\nimport { gridSize, colors } from '../../theme';\nexport const CREATE_FOGOT_PASSWORD_TOKEN = gql`\n  mutation startPasswordRecovery($email: String!) {\n    startPasswordRecovery(email: $email) {\n      id\n    }\n  }\n`;\nexport default (({\n  onSuccess,\n  onClickSignin\n}) => {\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: emailSent,\n    1: setEmailSent\n  } = useState(false);\n  const {\n    isAuthenticated\n  } = useAuth();\n\n  const handleSubmit = startPasswordRecovery => event => {\n    event.preventDefault();\n    startPasswordRecovery({\n      variables: {\n        email\n      }\n    });\n  }; // if the user is logged in, redirect to the homepage\n\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      Router.push('/');\n    }\n  }, [isAuthenticated]);\n  return jsx(Mutation, {\n    mutation: CREATE_FOGOT_PASSWORD_TOKEN,\n    onCompleted: () => {\n      setEmailSent(true);\n\n      if (onSuccess && typeof onSuccess === 'function') {\n        onSuccess();\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, (startPasswordRecovery, {\n    error: mutationError,\n    loading\n  }) => {\n    return jsx(React.Fragment, null, mutationError && jsx(\"p\", {\n      css: {\n        color: colors.red\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"There is no account with the email \\\"\", email, \"\\\"\"), jsx(\"form\", {\n      css: {\n        marginTop: gridSize * 3\n      },\n      noValidate: true,\n      onSubmit: handleSubmit(startPasswordRecovery),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, jsx(Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, jsx(Label, {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Email\"), jsx(Input, {\n      required: true,\n      type: \"text\",\n      autoFocus: true,\n      autoComplete: \"email\",\n      placeholder: \"you@awesome.com\",\n      disabled: isAuthenticated,\n      value: email,\n      onChange: e => setEmail(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), jsx(Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, loading ? jsx(Button, {\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Sending email...\") : emailSent ? jsx(Button, {\n      disabled: true,\n      css: {\n        background: colors.greyLight,\n        color: colors.greyMedium\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Email sent\") : jsx(Button, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Send\"), jsx(Link, {\n      href: \"/signin\",\n      onClick: onClickSignin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Sign in\"))));\n  });\n});","map":{"version":3,"sources":["C:/Users/wojtalam/Workspace/Github/arc-keystone5/site/components/auth/forgotPassword.js"],"names":["useState","useEffect","Mutation","Router","jsx","gql","useAuth","Button","Field","Group","Label","Link","Input","gridSize","colors","CREATE_FOGOT_PASSWORD_TOKEN","onSuccess","onClickSignin","email","setEmail","emailSent","setEmailSent","isAuthenticated","handleSubmit","startPasswordRecovery","event","preventDefault","variables","push","error","mutationError","loading","color","red","marginTop","e","target","value","background","greyLight","greyMedium"],"mappings":"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","sourcesContent":["/** @jsx jsx */\n\nimport { useState, useEffect } from 'react';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport { jsx } from '@emotion/core';\nimport gql from 'graphql-tag';\n\nimport { useAuth } from '../../lib/authetication';\nimport { Button, Field, Group, Label, Link, Input } from '../../primitives/forms';\nimport { gridSize, colors } from '../../theme';\n\nexport const CREATE_FOGOT_PASSWORD_TOKEN = gql`\n  mutation startPasswordRecovery($email: String!) {\n    startPasswordRecovery(email: $email) {\n      id\n    }\n  }\n`;\n\nexport default ({ onSuccess, onClickSignin }) => {\n  const [email, setEmail] = useState('');\n  const [emailSent, setEmailSent] = useState(false);\n  const { isAuthenticated } = useAuth();\n\n  const handleSubmit = startPasswordRecovery => event => {\n    event.preventDefault();\n    startPasswordRecovery({ variables: { email } });\n  };\n\n  // if the user is logged in, redirect to the homepage\n  useEffect(() => {\n    if (isAuthenticated) {\n      Router.push('/');\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <Mutation\n      mutation={CREATE_FOGOT_PASSWORD_TOKEN}\n      onCompleted={() => {\n        setEmailSent(true);\n\n        if (onSuccess && typeof onSuccess === 'function') {\n          onSuccess();\n        }\n      }}\n    >\n      {(startPasswordRecovery, { error: mutationError, loading }) => {\n        return (\n          <>\n            {mutationError && (\n              <p css={{ color: colors.red }}>There is no account with the email \"{email}\"</p>\n            )}\n\n            <form\n              css={{ marginTop: gridSize * 3 }}\n              noValidate\n              onSubmit={handleSubmit(startPasswordRecovery)}\n            >\n              <Field>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  required\n                  type=\"text\"\n                  autoFocus\n                  autoComplete=\"email\"\n                  placeholder=\"you@awesome.com\"\n                  disabled={isAuthenticated}\n                  value={email}\n                  onChange={e => setEmail(e.target.value)}\n                />\n              </Field>\n\n              <Group>\n                {loading ? (\n                  <Button disabled>Sending email...</Button>\n                ) : emailSent ? (\n                  <Button disabled css={{ background: colors.greyLight, color: colors.greyMedium }}>\n                    Email sent\n                  </Button>\n                ) : (\n                  <Button type=\"submit\">Send</Button>\n                )}\n                <Link href=\"/signin\" onClick={onClickSignin}>\n                  Sign in\n                </Link>\n              </Group>\n            </form>\n          </>\n        );\n      }}\n    </Mutation>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}