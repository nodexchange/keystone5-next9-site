{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport getConfig from 'next/config';\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\n\nvar _getConfig = getConfig(),\n    serverUrl = _getConfig.publicRuntimeConfig.serverUrl;\n\nvar apolloClient = null;\n\nfunction create(initialState) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: \"\".concat(serverUrl, \"/admin/api\"),\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      // Use fetch() polyfill on the server\n      fetch: !process.browser && fetch\n    }),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["C:/Users/wojtalam/Workspace/Github/arc-keystone5/site/lib/initApollo.js"],"names":["fetch","getConfig","ApolloClient","InMemoryCache","HttpLink","serverUrl","publicRuntimeConfig","apolloClient","create","initialState","connectToDevTools","process","browser","ssrMode","link","uri","credentials","cache","restore","initApollo"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAsD,cAAtD;;iBAIIH,SAAS,E;IADYI,S,cAAvBC,mB,CAAuBD,S;;AAGzB,IAAIE,YAAY,GAAG,IAAnB;;AAEA,SAASC,MAAT,CAAgBC,YAAhB,EAA8B;AAC5B;AACA,SAAO,IAAIP,YAAJ,CAAiB;AACtBQ,IAAAA,iBAAiB,EAAEC,OAAO,CAACC,OADL;AAEtBC,IAAAA,OAAO,EAAE,CAACF,OAAO,CAACC,OAFI;AAEK;AAC3BE,IAAAA,IAAI,EAAE,IAAIV,QAAJ,CAAa;AACjBW,MAAAA,GAAG,YAAKV,SAAL,eADc;AACc;AAC/BW,MAAAA,WAAW,EAAE,aAFI;AAEW;AAC5B;AACAhB,MAAAA,KAAK,EAAE,CAACW,OAAO,CAACC,OAAT,IAAoBZ;AAJV,KAAb,CAHgB;AAStBiB,IAAAA,KAAK,EAAE,IAAId,aAAJ,GAAoBe,OAApB,CAA4BT,YAAY,IAAI,EAA5C;AATe,GAAjB,CAAP;AAWD;;AAED,eAAe,SAASU,UAAT,CAAoBV,YAApB,EAAkC;AAC/C;AACA;AACA,MAAI,CAACE,OAAO,CAACC,OAAb,EAAsB;AACpB,WAAOJ,MAAM,CAACC,YAAD,CAAb;AACD,GAL8C,CAO/C;;;AACA,MAAI,CAACF,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGC,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOF,YAAP;AACD","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport getConfig from 'next/config';\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\n\nconst {\n  publicRuntimeConfig: { serverUrl },\n} = getConfig();\n\nlet apolloClient = null;\n\nfunction create(initialState) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: `${serverUrl}/admin/api`, // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n      // Use fetch() polyfill on the server\n      fetch: !process.browser && fetch,\n    }),\n    cache: new InMemoryCache().restore(initialState || {}),\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}\n"]},"metadata":{},"sourceType":"module"}