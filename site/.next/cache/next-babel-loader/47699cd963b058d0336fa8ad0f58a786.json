{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  query GetEventDetails($event: ID!) {\\n    Event(where: { id: $event }) {\\n      ...EventData\\n    }\\n    allRsvps(where: { event: { id: $event }, user_is_null: false }) {\\n      id\\n      user {\\n        id\\n        name\\n        ...UserImage\\n      }\\n    }\\n  }\\n  \", \"\\n  \", \"\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    allEvents(where: { startTime_not: null, status: active }, orderBy: \\\"startTime_DESC\\\") {\\n      ...EventData\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query GetCurrentEvents($now: DateTime!) {\\n    upcomingEvents: allEvents(\\n      where: { startTime_not: null, status: active, startTime_gte: $now }\\n      orderBy: \\\"startTime_DESC\\\"\\n    ) {\\n      ...EventData\\n    }\\n    previousEvents: allEvents(\\n      where: { startTime_not: null, status: active, startTime_lte: $now }\\n      orderBy: \\\"startTime_ASC\\\"\\n    ) {\\n      ...EventData\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  fragment EventData on Event {\\n    id\\n    name\\n    startTime\\n    locationAddress\\n    locationDescription\\n    description\\n    themeColor\\n    maxRsvps\\n    talks {\\n      id\\n      isLightningTalk\\n      name\\n      description\\n      speakers {\\n        id\\n        name\\n        ...UserImage\\n      }\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { USER_IMAGE } from './fragments';\nexport var EVENT_DATA = gql(_templateObject(), USER_IMAGE);\nexport var GET_CURRENT_EVENTS = gql(_templateObject2(), EVENT_DATA);\nexport var GET_ALL_EVENTS = gql(_templateObject3(), EVENT_DATA);\nexport var GET_EVENT_DETAILS = gql(_templateObject4(), EVENT_DATA, USER_IMAGE);","map":{"version":3,"sources":["C:/Users/wojtalam/Workspace/Github/arc-keystone5/site/graphql/events.js"],"names":["gql","USER_IMAGE","EVENT_DATA","GET_CURRENT_EVENTS","GET_ALL_EVENTS","GET_EVENT_DETAILS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,OAAO,IAAMC,UAAU,GAAGF,GAAH,oBAsBnBC,UAtBmB,CAAhB;AAyBP,OAAO,IAAME,kBAAkB,GAAGH,GAAH,qBAe3BE,UAf2B,CAAxB;AAkBP,OAAO,IAAME,cAAc,GAAGJ,GAAH,qBAMvBE,UANuB,CAApB;AASP,OAAO,IAAMG,iBAAiB,GAAGL,GAAH,qBAc1BE,UAd0B,EAe1BD,UAf0B,CAAvB","sourcesContent":["import gql from 'graphql-tag';\nimport { USER_IMAGE } from './fragments';\n\nexport const EVENT_DATA = gql`\n  fragment EventData on Event {\n    id\n    name\n    startTime\n    locationAddress\n    locationDescription\n    description\n    themeColor\n    maxRsvps\n    talks {\n      id\n      isLightningTalk\n      name\n      description\n      speakers {\n        id\n        name\n        ...UserImage\n      }\n    }\n  }\n  ${USER_IMAGE}\n`;\n\nexport const GET_CURRENT_EVENTS = gql`\n  query GetCurrentEvents($now: DateTime!) {\n    upcomingEvents: allEvents(\n      where: { startTime_not: null, status: active, startTime_gte: $now }\n      orderBy: \"startTime_DESC\"\n    ) {\n      ...EventData\n    }\n    previousEvents: allEvents(\n      where: { startTime_not: null, status: active, startTime_lte: $now }\n      orderBy: \"startTime_ASC\"\n    ) {\n      ...EventData\n    }\n  }\n  ${EVENT_DATA}\n`;\n\nexport const GET_ALL_EVENTS = gql`\n  {\n    allEvents(where: { startTime_not: null, status: active }, orderBy: \"startTime_DESC\") {\n      ...EventData\n    }\n  }\n  ${EVENT_DATA}\n`;\n\nexport const GET_EVENT_DETAILS = gql`\n  query GetEventDetails($event: ID!) {\n    Event(where: { id: $event }) {\n      ...EventData\n    }\n    allRsvps(where: { event: { id: $event }, user_is_null: false }) {\n      id\n      user {\n        id\n        name\n        ...UserImage\n      }\n    }\n  }\n  ${EVENT_DATA}\n  ${USER_IMAGE}\n`;\n"]},"metadata":{},"sourceType":"module"}