{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nimport facepaint from 'facepaint';\nimport { breakpoints } from '../theme';\n\nvar bpEntries = _Object$entries(breakpoints);\n\nvar maxWidth = function maxWidth(width) {\n  var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return \"\".concat(m ? '@media ' : '', \"(max-width: \").concat(width, \"px)\");\n};\n\nvar minWidth = function minWidth(width) {\n  var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return \"\".concat(m ? '@media ' : '', \"(min-width: \").concat(width, \"px)\");\n}; // MIN-width queries (default)\n\n\nexport var media = bpEntries.reduce(function (obj, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n\n  return _objectSpread({}, obj, _defineProperty({}, key, minWidth(value)));\n}, {}); // MAX-width queries\n\nexport var mediaMax = bpEntries.reduce(function (obj, _ref3) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n      key = _ref4[0],\n      value = _ref4[1];\n\n  return _objectSpread({}, obj, _defineProperty({}, key, maxWidth(value - 1)));\n}, {}); // ONLY-size queries\n\nexport var mediaOnly = bpEntries.reduce(function (obj, entry, idx) {\n  var nextEntry = bpEntries[idx + 1];\n  if (!nextEntry) return obj;\n  var min = entry[1];\n\n  var _nextEntry = _slicedToArray(nextEntry, 2),\n      size = _nextEntry[0],\n      max = _nextEntry[1];\n\n  return _objectSpread({}, obj, _defineProperty({}, size, \"\".concat(minWidth(min), \" and \").concat(maxWidth(max, false))));\n}, {});\n/*\n  Array Syntax for Breakpoints\n  ------------------------------\n  <div css={mq({\n    fontSize: [14, 16],\n    width: ['12rem', '24rem', '36rem', '48rem'],\n  })} />\n*/\n\nexport var mq = facepaint(_Object$values(breakpoints).map(function (value) {\n  return minWidth(value);\n}));","map":{"version":3,"sources":["C:/Users/wojtalam/Workspace/Github/arc-keystone5/site/helpers/media.js"],"names":["facepaint","breakpoints","bpEntries","maxWidth","width","m","minWidth","media","reduce","obj","key","value","mediaMax","mediaOnly","entry","idx","nextEntry","min","size","max","mq","map"],"mappings":";;;;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,WAAT,QAA4B,UAA5B;;AAEA,IAAMC,SAAS,GAAG,gBAAeD,WAAf,CAAlB;;AACA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,MAAQC,CAAR,uEAAY,IAAZ;AAAA,mBAAwBA,CAAC,GAAG,SAAH,GAAe,EAAxC,yBAAyDD,KAAzD;AAAA,CAAjB;;AACA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACF,KAAD;AAAA,MAAQC,CAAR,uEAAY,IAAZ;AAAA,mBAAwBA,CAAC,GAAG,SAAH,GAAe,EAAxC,yBAAyDD,KAAzD;AAAA,CAAjB,C,CAEA;;;AACA,OAAO,IAAMG,KAAK,GAAGL,SAAS,CAACM,MAAV,CACnB,UAACC,GAAD;AAAA;AAAA,MAAOC,GAAP;AAAA,MAAYC,KAAZ;;AAAA,2BAA6BF,GAA7B,sBAAmCC,GAAnC,EAAyCJ,QAAQ,CAACK,KAAD,CAAjD;AAAA,CADmB,EAEnB,EAFmB,CAAd,C,CAKP;;AACA,OAAO,IAAMC,QAAQ,GAAGV,SAAS,CAACM,MAAV,CACtB,UAACC,GAAD;AAAA;AAAA,MAAOC,GAAP;AAAA,MAAYC,KAAZ;;AAAA,2BAA6BF,GAA7B,sBAAmCC,GAAnC,EAAyCP,QAAQ,CAACQ,KAAK,GAAG,CAAT,CAAjD;AAAA,CADsB,EAEtB,EAFsB,CAAjB,C,CAKP;;AACA,OAAO,IAAME,SAAS,GAAGX,SAAS,CAACM,MAAV,CAAiB,UAACC,GAAD,EAAMK,KAAN,EAAaC,GAAb,EAAqB;AAC7D,MAAMC,SAAS,GAAGd,SAAS,CAACa,GAAG,GAAG,CAAP,CAA3B;AAEA,MAAI,CAACC,SAAL,EAAgB,OAAOP,GAAP;AAEhB,MAAMQ,GAAG,GAAGH,KAAK,CAAC,CAAD,CAAjB;;AAL6D,kCAMzCE,SANyC;AAAA,MAMtDE,IANsD;AAAA,MAMhDC,GANgD;;AAQ7D,2BACKV,GADL,sBAEGS,IAFH,YAEaZ,QAAQ,CAACW,GAAD,CAFrB,kBAEkCd,QAAQ,CAACgB,GAAD,EAAM,KAAN,CAF1C;AAID,CAZwB,EAYtB,EAZsB,CAAlB;AAcP;;;;;;;;;AASA,OAAO,IAAMC,EAAE,GAAGpB,SAAS,CAAC,eAAcC,WAAd,EAA2BoB,GAA3B,CAA+B,UAAAV,KAAK;AAAA,SAAIL,QAAQ,CAACK,KAAD,CAAZ;AAAA,CAApC,CAAD,CAApB","sourcesContent":["import facepaint from 'facepaint';\nimport { breakpoints } from '../theme';\n\nconst bpEntries = Object.entries(breakpoints);\nconst maxWidth = (width, m = true) => `${m ? '@media ' : ''}(max-width: ${width}px)`;\nconst minWidth = (width, m = true) => `${m ? '@media ' : ''}(min-width: ${width}px)`;\n\n// MIN-width queries (default)\nexport const media = bpEntries.reduce(\n  (obj, [key, value]) => ({ ...obj, [key]: minWidth(value) }),\n  {}\n);\n\n// MAX-width queries\nexport const mediaMax = bpEntries.reduce(\n  (obj, [key, value]) => ({ ...obj, [key]: maxWidth(value - 1) }),\n  {}\n);\n\n// ONLY-size queries\nexport const mediaOnly = bpEntries.reduce((obj, entry, idx) => {\n  const nextEntry = bpEntries[idx + 1];\n\n  if (!nextEntry) return obj;\n\n  const min = entry[1];\n  const [size, max] = nextEntry;\n\n  return {\n    ...obj,\n    [size]: `${minWidth(min)} and ${maxWidth(max, false)}`,\n  };\n}, {});\n\n/*\n  Array Syntax for Breakpoints\n  ------------------------------\n  <div css={mq({\n    fontSize: [14, 16],\n    width: ['12rem', '24rem', '36rem', '48rem'],\n  })} />\n*/\n\nexport const mq = facepaint(Object.values(breakpoints).map(value => minWidth(value)));\n"]},"metadata":{},"sourceType":"module"}