{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\wojtalam\\\\Workspace\\\\Github\\\\arc-keystone5\\\\site\\\\lib\\\\withApollo.js\";\nvar __jsx = React.createElement;\n\n/* This code is lifted from the Next.js Apollo example. See\nhttps://github.com/zeit/next.js/blob/canary/examples/with-apollo */\nimport React from 'react';\nimport initApollo from './initApollo';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class Apollo extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        Component,\n        router,\n        ctx: {\n          res\n        }\n      } = ctx; // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n      const apollo = initApollo();\n      ctx.ctx.apolloClient = apollo;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {};\n      }\n\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(__jsx(App, _extends({}, appProps, {\n            Component: Component,\n            router: router,\n            apolloClient: apollo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40\n            },\n            __self: this\n          })));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread({}, appProps, {\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return __jsx(App, _extends({}, this.props, {\n        apolloClient: this.apolloClient,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", 'withApollo(App)'), _temp;\n});","map":{"version":3,"sources":["C:/Users/wojtalam/Workspace/Github/arc-keystone5/site/lib/withApollo.js"],"names":["React","initApollo","Head","getDataFromTree","App","Apollo","Component","getInitialProps","ctx","router","res","apollo","apolloClient","appProps","finished","process","browser","error","console","rewind","apolloState","cache","extract","constructor","props","render"],"mappings":";;;;;;AAAA;;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,gBAAeC,GAAG,IAAI;AAAA;;AACpB,0BAAO,MAAMC,MAAN,SAAqBL,KAAK,CAACM,SAA3B,CAAqC;AAE1C,iBAAaC,eAAb,CAA6BC,GAA7B,EAAkC;AAChC,YAAM;AACJF,QAAAA,SADI;AAEJG,QAAAA,MAFI;AAGJD,QAAAA,GAAG,EAAE;AAAEE,UAAAA;AAAF;AAHD,UAIFF,GAJJ,CADgC,CAOhC;AACA;;AACA,YAAMG,MAAM,GAAGV,UAAU,EAAzB;AAEAO,MAAAA,GAAG,CAACA,GAAJ,CAAQI,YAAR,GAAuBD,MAAvB;AAEA,UAAIE,QAAQ,GAAG,EAAf;;AACA,UAAIT,GAAG,CAACG,eAAR,EAAyB;AACvBM,QAAAA,QAAQ,GAAG,MAAMT,GAAG,CAACG,eAAJ,CAAoBC,GAApB,CAAjB;AACD;;AAED,UAAIE,GAAG,IAAIA,GAAG,CAACI,QAAf,EAAyB;AACvB;AACA;AACA,eAAO,EAAP;AACD;;AAED,UAAI,CAACC,OAAO,CAACC,OAAb,EAAsB;AACpB,YAAI;AACF;AACA,gBAAMb,eAAe,CACnB,MAAC,GAAD,eAASU,QAAT;AAAmB,YAAA,SAAS,EAAEP,SAA9B;AAAyC,YAAA,MAAM,EAAEG,MAAjD;AAAyD,YAAA,YAAY,EAAEE,MAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADmB,CAArB;AAGD,SALD,CAKE,OAAOM,KAAP,EAAc;AACd;AACA;AACA;AACAC,UAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD,SAXmB,CAapB;AACA;;;AACAf,QAAAA,IAAI,CAACiB,MAAL;AACD,OAxC+B,CA0ChC;;;AACA,YAAMC,WAAW,GAAGT,MAAM,CAACU,KAAP,CAAaC,OAAb,EAApB;AAEA,+BACKT,QADL;AAEEO,QAAAA;AAFF;AAID;;AAEDG,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AACA,WAAKZ,YAAL,GAAoBX,UAAU,CAACuB,KAAK,CAACJ,WAAP,CAA9B;AACD;;AAEDK,IAAAA,MAAM,GAAG;AACP,aAAO,MAAC,GAAD,eAAS,KAAKD,KAAd;AAAqB,QAAA,YAAY,EAAE,KAAKZ,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AA5DyC,GAA5C,yCACuB,iBADvB;AA8DD,CA/DD","sourcesContent":["/* This code is lifted from the Next.js Apollo example. See\nhttps://github.com/zeit/next.js/blob/canary/examples/with-apollo */\n\nimport React from 'react';\nimport initApollo from './initApollo';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static displayName = 'withApollo(App)';\n    static async getInitialProps(ctx) {\n      const {\n        Component,\n        router,\n        ctx: { res },\n      } = ctx;\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo();\n\n      ctx.ctx.apolloClient = apollo;\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {};\n      }\n\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App {...appProps} Component={Component} router={router} apolloClient={apollo} />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState,\n      };\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}